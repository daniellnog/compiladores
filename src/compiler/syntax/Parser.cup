package compiler.syntax;

import java_cup.runtime.*;
import java.util.*;
import compiler.tree.*;
import compiler.tree.expression.*;
import compiler.tree.command.*;

/*****  Terminais (tokens) *****/

terminal String IDENTIFICADOR;
    
terminal String  IGUAL_QUE, DIFERENTE_QUE; 
terminal String  MAIOR_QUE, MENOR_QUE, MAIOR_OU_IGUAL, MENOR_OU_IGUAL;
terminal String SOMA, SUB, MULT, DIV, RESTO;
terminal String  AND, OR, NOT;
    
terminal String ATRIBUICAO, VIRGULA, PONTO_VIRGULA;
terminal String ABRE_PAR, FECHA_PAR, ABRE_CHAVE, FECHA_CHAVE;
    
terminal String  INT_LITERAL;
terminal String  FLOAT_LITERAL;
terminal String  CHAR_LITERAL;
    
terminal String KEY_IF, KEY_ELSE;
terminal String KEY_WHILE, KEY_RETURN;
terminal String KEY_INT, KEY_FLOAT, KEY_CHAR, KEY_PRINT;
terminal String KEY_VAR, KEY_PROC;


/***** Nao-terminais *****/

non terminal Programa				programa;
non terminal DeclGlobal				decl_global;
non terminal DeclVariavel			decl_variavel;
non terminal LinkedList<String>		lista_idents;
non terminal LinkedList<String>		resto_lista_idents;
non terminal Tipo					tipo;
non terminal LinkedList<DeclFuncao>	decl_funcao;
non terminal NomeComArgumentos		nome_args;
non terminal LinkedList<DeclVariavel>	param_formais;
non terminal LinkedList<DeclVariavel>	resto_param_formais;
non terminal Bloco					bloco;
non terminal LinkedList<Comando>	lista_comandos;
non terminal Comando				comando;
non terminal Atribuicao				atribuicao;
non terminal Iteracao				iteracao;
non terminal Decisao				decisao;
non terminal Escrita				escrita;
non terminal ChamadaFunc			chamada_func_cmd;
non terminal Retorno				retorno;
non terminal ChamadaFunc			chamada_func;
non terminal LinkedList<Expressao>	lista_exprs;
non terminal LinkedList<Expressao>	resto_lista_exprs;
non terminal Expressao 				expressao;
non terminal Expressao 				expr_basica;


/***** Precedencia e associatividade *****/

precedence left OR, AND; //simbolos de menor precedencia
precedence left IGUAL_QUE, DIFERENTE_QUE, MAIOR_QUE, MENOR_QUE, MAIOR_OU_IGUAL, MENOR_OU_IGUAL;
precedence left SOMA, SUB;     
precedence left MULT, DIV, RESTO;   
precedence left NOT;     //simbolo de maior precedencia


/***** A gramatica *****/

programa ::= programa:p decl_global:d
			  {: p.addLast(d); RESULT = p ;  :}
		   | /*vazio*/
		      {: RESULT = new Programa();  :}
           ;


decl_global ::= decl_variavel:d1
				 {: RESULT = d1;       :}
              | decl_funcao: d1
			     {: RESULT = d1;      :}
              ;
            
            
decl_variavel ::= KEY_VAR lista_idents:listaIdents SUB tipo:tipo PONTO_VIRGULA
 				{:	RESULT = new DeclVariavel(listaIdents, tipo);  :}
                ;
                

lista_idents ::= IDENTIFICADOR:id resto_lista_idents:rest_list_ident
 				{: rest_list_ident.addFirst(id); RESULT = rest_list_ident; :}
               ;


resto_lista_idents ::=  VIRGULA IDENTIFICADOR:id resto_lista_idents:resto
				{:  resto.addFirst(id); RESULT = resto; :}
                     |  /* vazio */
				{:  RESULT = new LinkedList<String>(); :}
                     ;


tipo ::= KEY_INT
		{:  RESULT = Tipo.INT; :}
	   | KEY_CHAR 
		{:  RESULT = Tipo.CHAR; :}
	   | KEY_FLOAT 
		{:  RESULT = Tipo.FLOAT; :}
	   ;

decl_funcao ::= KEY_PROC nome_args:nome_args SUB tipo:tipo bloco:bloco
				{: RESULT = new DeclFuncao(nome_args,tipo,bloco); :}

              | KEY_PROC nome_args:nome_args bloco:bloco
              {: RESULT = new DeclFuncao(nome_args,bloco); :}

		      ;	  

nome_args ::= IDENTIFICADOR:id ABRE_PAR param_formais:pf FECHA_PAR
				{:RESULT = new NomeComArgumentos(id,pf); :}
            | nome_args:nome_args IDENTIFICADOR:id ABRE_PAR param_formais:pf FECHA_PAR
				{:RESULT=nome_args; nome_args.addId(id); nome_args.addParamForm(pf); :}
            ;
             

param_formais ::= IDENTIFICADOR:id SUB tipo:tipo resto_param_formais:rest_par_form
				{:	rest_par_form.addFirst(new DeclVariavel(id,tipo)); RESULT = rest_par_form;	:}
                | /*vazio*/
				{: RESULT = new LinkedList<DeclVariavel>(); :}
                ;
		
resto_param_formais ::= VIRGULA IDENTIFICADOR:id SUB tipo:tipo resto_param_formais:rest_par_form
						{:	rest_par_form.addFirst(new DeclVariavel(id,tipo)); RESULT = rest_par_form;	:}
                      | /*vazio*/
						{: RESULT = new LinkedList<DeclVariavel>(); :}
                      ; 

		
bloco ::= ABRE_CHAVE lista_comandos:lista_cmd FECHA_CHAVE 
		{:	RESULT = new Bloco(lista_cmd);	:}
		;	
			
		
lista_comandos ::= lista_comandos:lista_cmd comando:cmd
					{: lista_cmd.addFirst(cmd); RESULT = lista_cmd; :}
				 | /*vazio*/
 					{: RESULT = new LinkedList<Comando>(); :}
                 ;		
		
comando  ::= decl_variavel:dv1
		{:	RESULT = dv1;	:}
           | atribuicao:a
		{:	RESULT = a;	:}
           | iteracao:i
     	{:	RESULT = i;	:}
           | decisao:d
		{:	RESULT = d;	:}
           | escrita:e
		{:	RESULT = e;	:}
           | retorno:r
		{:	RESULT = r;	:}
           | bloco:b
		{:	RESULT = b;	:}
           | chamada_func_cmd:cfc1
		{:	RESULT = cfc1;	:}
           ;
           
           
atribuicao ::= IDENTIFICADOR:id ATRIBUICAO expressao:e PONTO_VIRGULA 
                {: RESULT = new Atribuicao(id,e);     :}
			 ;	 

           
iteracao ::= KEY_WHILE ABRE_PAR expressao:e FECHA_PAR comando:cmd 
			{:RESULT = new Iteracao(e,cmd);	 :}
  		   ;            

decisao ::= KEY_IF ABRE_PAR expressao:e FECHA_PAR comando:cmd1 KEY_ELSE comando:cmd2
			{:	RESULT = new Decisao(e,cmd1,cmd2);		:}
          | KEY_IF ABRE_PAR expressao:e FECHA_PAR comando:cmd
			{:	RESULT = new Decisao(e,cmd);		:}
          ;

escrita ::= KEY_PRINT ABRE_PAR expressao:le FECHA_PAR PONTO_VIRGULA 
			{:	RESULT = new Escrita(le);	:}
		  ;

chamada_func_cmd ::= chamada_func:cf PONTO_VIRGULA 
					{:	RESULT = cf;	:}
				   ;
					
retorno ::= KEY_RETURN expressao:e PONTO_VIRGULA 
			{: RESULT = new Retorno(e);	:}
		  ;

		
chamada_func ::= IDENTIFICADOR:id ABRE_PAR lista_exprs:le FECHA_PAR 
				{: RESULT = new ChamadaFunc(id,le); 	:}
               | chamada_func:cf IDENTIFICADOR:id ABRE_PAR lista_exprs:le FECHA_PAR  /* recursao a esquerda, para gerar repeticoes/lista sequencial */
				{: 	RESULT = cf; c.addId(id); c.addListExp(le);	:}
			   ;

			
lista_exprs ::= expressao:e resto_lista_exprs:rle
				{: rle.addFirst(e); RESULT = rle; :}
              | /*vazio*/
				{: RESULT = new LinkedList<Expressao>(); :}
              ; 

			
resto_lista_exprs ::= resto_lista_exprs:rle VIRGULA expressao:e
					{: rle.addFirst(e);   RESULT = rle; :}
                    | /*vazio*/
					{: RESULT = new LinkedList<Expressao>(); :}
                    ;

			
			
expressao ::= expressao:e1 SOMA expressao:e2
        	{:	RESULT = new ExprAritmetica(e1,e2,"+");	:}
            | expressao:e1 SUB expressao:e2
        	{:	RESULT = new ExprAritmetica(e1,e2,"-");	:}
            | expressao:e1 MULT expressao:e2
        	{:	RESULT = new ExprAritmetica(e1,e2,"*");	:}
            | expressao:e1 DIV expressao:e2
        	{:	RESULT = new ExprAritmetica(e1,e2,"/");	:}
            | expressao:e1 RESTO expressao:e2
        	{:	RESULT = new ExprAritmetica(e1,e2,"%");	:}
            | expressao:e1 AND expressao:e2
        	{:	RESULT = new ExprLogica(e1,e2,"&");	:}
        	| expressao:e1 OR expressao:e2
        	{:	RESULT = new ExprLogica(e1,e2,"|");	:}
        	| expressao:e1 IGUAL_QUE expressao:e2
        	{:	RESULT = new ExprRelacional(e1,e2,"==");	:}
        	| expressao:e1 DIFERENTE_QUE expressao:e2
	        {:	RESULT = new ExprRelacional(e1,e2,"!=");	:}	
	        | expressao:e1 MENOR_QUE expressao:e2
	        {:	RESULT = new ExprRelacional(e1,e2,"<");	:}	
	        | expressao:e1 MENOR_OU_IGUAL expressao:e2
	        {:	RESULT = new ExprRelacional(e1,e2,"<=");	:}	
	        | expressao:e1 MAIOR_OU_IGUAL expressao:e2
	        {:	RESULT = new ExprRelacional(e1,e2,">=");	:}	
	        | expressao:e1 MAIOR_QUE expressao:e2
	        {:	RESULT = new ExprRelacional(e1,e2,">");	:}	
	        | expr_basica:e1
	        {:	RESULT = e1;	:}	
	        ;

expr_basica ::= ABRE_PAR expressao:e FECHA_PAR 
             	{:RESULT = e;	:}
   		      | NOT:n expr_basica:e
				{: RESULT = new ExpUnaria(n,e);  :}
         	  | SUB:s expr_basica:e
         		{: RESULT = new ExpUnaria(s,e);  :}
        	  | INT_LITERAL:lexema
                {:  int valor = Integer.parseInt(lexema); RESULT = new IntLiteral(valor);    :}         
         	  | CHAR_LITERAL:lexema
         		RESULT = new CharLiteral(lexema);	:}
         	  | FLOAT_LITERAL:lexema
         		float valor = Float.parseFloat(lexema); RESULT = new FloatLiteral(valor);	:}
         	  | IDENTIFICADOR:lexema
         		{:	RESULT = new ExprIdentificador(lexema);  :}
         	  | chamada_func:cf
         		{:RESULT = cf;	:}
         		;

